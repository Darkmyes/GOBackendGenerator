<?php
	header('Access-Control-Allow-Origin: *');
	header('Content-Type: application/json');

	/*$contentType = isset($_SERVER['CONTENT_TYPE']) ? trim($_SERVER['CONTENT_TYPE']) : '';
	if(strcasecmp($contentType, 'application/json') != 0){
		header('HTTP/1.1 404 Bad Request', true, 404);//throw new Exception('Content type must be: application/json');
		return;
	}*/

	include_once '../libs/php-jwt-master/src/BeforeValidException.php';
	include_once '../libs/php-jwt-master/src/ExpiredException.php';
	include_once '../libs/php-jwt-master/src/SignatureInvalidException.php';
	include_once '../libs/php-jwt-master/src/JWT.php';
	include_once '../config/jwt_config.php';
	use \Firebase\JWT\JWT;

	$bodydata = trim(file_get_contents('php://input'));
	$jsondata = json_decode($bodydata, true);

	if(!is_array($jsondata)){
		header('HTTP/1.1 404 Bad Request');
	}

	/*$jwt = isset($jsondata['token']) ? $jsondata['token'] : '';
	if($jwt){
		try {
			$decoded = JWT::decode($jwt, $key, array('HS256'));
		}	catch (Exception $e){
			header('HTTP/1.1 401 Unauthorized', true, 401);
			echo json_encode(array(
				'message' => 'Access denied.',
				'error' => $e->getMessage()
			));
			return;
		}

	}*/

	include_once '../connection.php';
	include_once '../models/{{- .Name -}}.php';

	$db = new Database();
	$conn = $db->connect();
	${{- .Name -}} = new {{.Name -}}();
	${{- .Name -}}->connection = $conn;

    {{$ModelName := .Name -}}
    {{range $index, $element := .Columns -}}
        ${{$ModelName -}}->{{$element.Name}} = isset($jsondata['{{$element.Name}}']) ? utf8_decode($jsondata['{{$element.Name}}']) : '';
    {{end}}
	if ($_SERVER['REQUEST_METHOD'] === 'GET') {
		if( isset($jsondata->codigo) ){
			$stmt = ${{- .Name -}}->findOne();

			if($stmt->columnCount() > 0){
				if($row = $stmt->fetch()){
					$item = array(
                        {{- range $index, $element := .Columns -}}
                        {{- if $index -}} , {{- end}}
                        '{{$element.Name -}}' => utf8_encode($row['{{$element.Name}}'])
                        {{- end}}
				    );
					header('HTTP/1.1 200 OK', true, 200);
					echo json_encode($item);
					return;
				}
			}else{
				header('HTTP/1.1 204 No Content', true, 204);
				echo json_encode( array('message' => 'NO ROWS FOUND') );
				return;
			}
		}else{
			$stmt = ${{- .Name -}}->findAll();

			if($stmt->columnCount() > 0){
				$list = array();

				while($row = $stmt->fetch()){
					$item = array(
						{{- range $index, $element := .Columns -}}
                        {{- if $index -}} , {{- end}}
                        '{{$element.Name -}}' => utf8_encode($row['{{$element.Name}}'])
                        {{- end}}
					);
					array_push($list, $item);
				}
				header('HTTP/1.1 200 OK', true, 200);
				echo json_encode($list);
				return;
			}else{
				header('HTTP/1.1 204 No Content', true, 204);
				echo json_encode( array('message' => 'NO ROWS FOUND') );
				return;
			}
		}

	}else if ($_SERVER['REQUEST_METHOD'] === 'DELETE') {
		if( ${{- .Name -}}->delete() ){
			header('HTTP/1.1 200 OK', true, 200);
			echo json_encode( array('message' => 'SUCCESSFUL') );
			return;
		}else{
			header('HTTP/1.1 202 Accepted', true, 202);
			echo json_encode( array('message' => 'ERROR WHILE DELETE') );
		}

	}else if ($_SERVER['REQUEST_METHOD'] === 'POST') {
		if( ${{- .Name -}}->insert() ){
			header('HTTP/1.1 201 Created', true, 201);
			echo json_encode( array('message' => 'SUCCESSFUL') );
			return;
		}else{
			header('HTTP/1.1 202 Accepted', true, 202);
			echo json_encode( array('message' => 'ERROR WHILE INSERT') );
		}

	}else if ($_SERVER['REQUEST_METHOD'] === 'PUT') {
		if( ${{- .Name -}}->update() ){
			header('HTTP/1.1 200 OK', true, 200);
			echo json_encode( array('message' => 'SUCCESSFUL') );
			return;
		}else{
			header('HTTP/1.1 202 Accepted', true, 202);
			echo json_encode( array('message' => 'ERROR WHILE UPDATE') );
		}
	}
?>